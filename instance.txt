TROUBLESHOOTING CHECKLIST
-------------------------

1. ✅ Check if datePlanted is a string in your form data
2. ✅ Convert string to Date object using new Date(dateString)
3. ✅ Validate the date is valid before sending
4. ✅ Check browser console for the exact error message
5. ✅ Ensure your form input type="date" is working correctly
6. ✅ Verify the date format being sent (should be ISO string)
7. ✅ Test with a hardcoded date first to isolate the issue

SOLUTION 11: DATE OBJECT SERIALIZATION ISSUE
--------------------------------------------

// If you're getting "datePlanted must be a Date instance" even when sending Date objects

// PROBLEM: Date objects get serialized to strings during HTTP transmission
// SOLUTION: Convert to ISO string or use proper date formatting

// Method 1: Convert to ISO String (Recommended)
const createTreePlanting = async (data) => {
  try {
    const response = await apiClient.post('/api/conservation/tree-planting', {
      treeType: data.treeType,
      location: data.location,
      numberOfTrees: Number(data.numberOfTrees),
      datePlanted: data.datePlanted.toISOString(), // Convert Date to ISO string
      description: data.description,
      targetBeneficiaries: Number(data.targetBeneficiaries),
      currentBeneficiaries: Number(data.currentBeneficiaries)
    });
    return response.data;
  } catch (error) {
    console.error('Tree planting creation error:', error);
    throw error;
  }
};

// Method 2: Use ISO String format directly
const createTreePlanting = async (data) => {
  try {
    // Ensure datePlanted is in ISO format
    let datePlanted;
    if (data.datePlanted instanceof Date) {
      datePlanted = data.datePlanted.toISOString();
    } else if (typeof data.datePlanted === 'string') {
      // If it's already a string, validate and convert
      const date = new Date(data.datePlanted);
      if (isNaN(date.getTime())) {
        throw new Error('Invalid date format');
      }
      datePlanted = date.toISOString();
    } else {
      throw new Error('datePlanted must be a valid date');
    }

    const response = await apiClient.post('/api/conservation/tree-planting', {
      treeType: data.treeType,
      location: data.location,
      numberOfTrees: Number(data.numberOfTrees),
      datePlanted: datePlanted, // ISO string format
      description: data.description,
      targetBeneficiaries: Number(data.targetBeneficiaries),
      currentBeneficiaries: Number(data.currentBeneficiaries)
    });
    return response.data;
  } catch (error) {
    console.error('Tree planting creation error:', error);
    throw error;
  }
};

// Method 3: Handle timezone issues
const createTreePlanting = async (data) => {
  try {
    // Handle timezone conversion properly
    let datePlanted;
    if (data.datePlanted instanceof Date) {
      // Get the date in local timezone without time
      const year = data.datePlanted.getFullYear();
      const month = String(data.datePlanted.getMonth() + 1).padStart(2, '0');
      const day = String(data.datePlanted.getDate()).padStart(2, '0');
      datePlanted = `${year}-${month}-${day}`;
    } else if (typeof data.datePlanted === 'string') {
      datePlanted = data.datePlanted;
    } else {
      throw new Error('datePlanted must be a valid date');
    }

    const response = await apiClient.post('/api/conservation/tree-planting', {
      treeType: data.treeType,
      location: data.location,
      numberOfTrees: Number(data.numberOfTrees),
      datePlanted: datePlanted, // YYYY-MM-DD format
      description: data.description,
      targetBeneficiaries: Number(data.targetBeneficiaries),
      currentBeneficiaries: Number(data.currentBeneficiaries)
    });
    return response.data;
  } catch (error) {
    console.error('Tree planting creation error:', error);
    throw error;
  }
};

SOLUTION 12: COMPLETE TREE PLANTING FIX
---------------------------------------

// Complete working solution for tree planting with proper date handling

const handleCreateEntry = async (formData) => {
  try {
    // Validate and format the date properly
    let formattedDate;
    
    if (formData.datePlanted instanceof Date) {
      // If it's already a Date object, convert to ISO string
      formattedDate = formData.datePlanted.toISOString().split('T')[0]; // YYYY-MM-DD
    } else if (typeof formData.datePlanted === 'string') {
      // If it's a string, validate it's a proper date
      const date = new Date(formData.datePlanted);
      if (isNaN(date.getTime())) {
        throw new Error('Invalid date format for date planted');
      }
      formattedDate = date.toISOString().split('T')[0]; // YYYY-MM-DD
    } else {
      throw new Error('datePlanted must be a valid date');
    }

    const payload = {
      treeType: formData.treeType,
      location: formData.location,
      numberOfTrees: Number(formData.numberOfTrees),
      datePlanted: formattedDate, // Use formatted date string
      description: formData.description,
      targetBeneficiaries: Number(formData.targetBeneficiaries),
      currentBeneficiaries: Number(formData.currentBeneficiaries)
    };

    console.log('Sending payload:', payload); // Debug log

    const result = await createTreePlanting(payload);
    console.log('Tree planting created successfully:', result);
    return result;
  } catch (error) {
    console.error('Failed to create tree planting entry:', error);
    throw error;
  }
};

// Updated API function
const createTreePlanting = async (data) => {
  try {
    const response = await apiClient.post('/api/conservation/tree-planting', data);
    return response.data;
  } catch (error) {
    console.error('Tree planting creation error:', error);
    throw error;
  }
};

SOLUTION 13: DEBUGGING DATE ISSUES
----------------------------------

// Add this debugging code to see exactly what's being sent

const debugDateIssue = (formData) => {
  console.log('=== DATE DEBUGGING ===');
  console.log('Original datePlanted:', formData.datePlanted);
  console.log('Type of datePlanted:', typeof formData.datePlanted);
  console.log('Is Date instance:', formData.datePlanted instanceof Date);
  
  if (formData.datePlanted instanceof Date) {
    console.log('Date methods:');
    console.log('- getTime():', formData.datePlanted.getTime());
    console.log('- toISOString():', formData.datePlanted.toISOString());
    console.log('- toString():', formData.datePlanted.toString());
    console.log('- toDateString():', formData.datePlanted.toDateString());
  }
  
  console.log('=====================');
};

// Use in your form submission
const handleSubmit = async (e) => {
  e.preventDefault();
  
  // Debug the date
  debugDateIssue(formData);
  
  try {
    await handleCreateEntry(formData);
    // Success handling
  } catch (error) {
    console.error('Error:', error);
    alert(`Error: ${error.message}`);
  }
};

SOLUTION 14: ALTERNATIVE DATE FORMATS
-------------------------------------

// If the backend expects different date formats, try these alternatives:

// Option 1: Unix timestamp
datePlanted: data.datePlanted.getTime()

// Option 2: Date string without time
datePlanted: data.datePlanted.toDateString()

// Option 3: Custom format
datePlanted: `${data.datePlanted.getFullYear()}-${String(data.datePlanted.getMonth() + 1).padStart(2, '0')}-${String(data.datePlanted.getDate()).padStart(2, '0')}`

// Option 4: UTC date
datePlanted: data.datePlanted.toUTCString()

// Test each format to see which one the backend accepts
